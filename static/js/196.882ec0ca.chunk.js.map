{"version":3,"file":"static/js/196.882ec0ca.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useEffect, useState } from 'react';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({})\n    const {getCharacter, clearError, process, setProcess} = useMarvelService()\n\n\n    useEffect(() => {\n        updateChar()\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data\n    let imgStyle = {'objectFit': 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return(\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process){\n        case 'waiting':\n            return <Spinner/>\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n        case 'confirmed':\n            return <Component/>\n        case 'error':\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"char__list\">\n            {setContent(process, () => renderItems(charList), newItemLoading)}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\n\n\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService()\n    const [char, setChar] = useState(null)\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        \n        const {charId} = props\n        if(!charId){\n            return\n        }\n\n        clearError()\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data\n    let imgStyle = {'objectFit': 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return(\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if(i > 9) return;\n                        return(\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n/*     static getDerivedStateFromError(error){\r\n        return {error: true}\r\n    } */\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if(this.state.error === true){\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './CharSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=f052699492740fe548edaf82f49551fb';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading')\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\nconst setContent = (process, Component ,data) => {\r\n    switch(process){\r\n        case 'waiting':\r\n            return <Skeleton/>\r\n        case 'loading':\r\n            return <Spinner/>\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","Component","newItemLoading","Spinner","ErrorMessage","Error","props","charList","setCharList","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}