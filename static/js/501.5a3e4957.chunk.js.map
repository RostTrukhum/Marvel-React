{"version":3,"file":"static/js/501.5a3e4957.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport setContent from '../../utils/setContent';\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n        const {id} = useParams();\r\n        const [data, setData] = useState(null);\r\n        const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n        useEffect(() => {\r\n            updateData()\r\n        }, [id])\r\n\r\n        const updateData = () => {\r\n            clearError();\r\n\r\n            switch (dataType) {\r\n                case 'comic':\r\n                    getComic(id).\r\n                    then(onDataLoaded)\r\n                    .then(() => setProcess('confirmed'));\r\n                    break;\r\n                case 'character':\r\n                    getCharacter(id)\r\n                    .then(onDataLoaded)\r\n                    .then(() => setProcess('confirmed'));\r\n            }\r\n        }\r\n\r\n        const onDataLoaded = (data) => {\r\n            setData(data);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <AppBanner/>\r\n                {setContent(process, Component, data)}\r\n            </>\r\n        )\r\n}\r\n\r\nexport default SinglePage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=f052699492740fe548edaf82f49551fb';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading')\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\nconst setContent = (process, Component ,data) => {\r\n    switch(process){\r\n        case 'waiting':\r\n            return <Skeleton/>\r\n        case 'loading':\r\n            return <Spinner/>\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","Component","dataType","id","useParams","useState","data","setData","useMarvelService","getComic","getCharacter","clearError","process","setProcess","useEffect","updateData","then","onDataLoaded","setContent","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getAllComics","_transformComics","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","Spinner","ErrorMessage"],"sourceRoot":""}