{"version":3,"file":"static/js/748.40e1e33a.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js","../javascript/esm|C:/Users/CHIDA/Desktop/React Study/Projects/marvel_starter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../javascript/esm|C:/Users/CHIDA/Desktop/React Study/Projects/marvel_starter/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../javascript/esm|C:/Users/CHIDA/Desktop/React Study/Projects/marvel_starter/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../javascript/esm|C:/Users/CHIDA/Desktop/React Study/Projects/marvel_starter/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process){\n        case 'waiting':\n            return <Spinner/>\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n        case 'confirmed':\n            return <Component/>\n        case 'error':\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    \n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBaner from '../appBanner/AppBanner'\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                name=\"description\"\r\n                content=\"Page with with list of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBaner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=f052699492740fe548edaf82f49551fb';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading')\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","useState","comicsList","setComicsList","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","loading","error","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","arr","items","map","item","i","to","id","thumbnail","title","price","renderItems","disabled","onClick","Helmet","name","content","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacterByName","getCharacter","_transformComics","getComic","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}